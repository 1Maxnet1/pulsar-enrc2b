#!/bin/bash
curDate=$(date +"%Y%m%d")
startT=$(date +%s)
threads=$(sysctl -n hw.ncpu)
quiet=1
interactive=0
fn="$curDate"
defconfig="enrc2b_defconfig"

showhelp() {
	echo "Usage: $(basename $0) <option> <argument> ..."
	echo "Options:"
	echo "    -v            Run in verbose mode."
	echo "    -h            Show this help message."
	echo "    -x            Modify kernel config during build (menuconfig)."
	echo "    -j <num>      Use <num> threads for make."
	echo "    -r <string>   Name current release <string>."
	echo "    -d <config>   Use <config> instead of default defconfig ($defconfig)."
}

if [[ "$@" == "" ]]; then
	echo "Warning: running in silent mode with default settings."
fi

while getopts "vj:r:d:hx" opt; do
	case "$opt" in
		v)
			quiet=0
			;;
		j)
			threads="$OPTARG"
			;;
		r)
			fn="$OPTARG-$curDate"
			;;
		d)
			defconfig="$OPTARG"
			;;
		h)
			showhelp
			exit 0
			;;
		x)
			interactive=1
			;;
		\?)
			echo -e "Error: Invalid option -\"$OPTARG\".\n"
			showhelp
			exit 1
			;;
		:)
			echo -e "Error: Option -\"$OPTARG\" requires an argument.\n"
			showhelp
			exit 1
			;;
	esac
done

if [[ $quiet == 0 ]]; then
	mk() {
		make -j$threads "$@"
	}
else
	logFile="/Volumes/enrc2b/logs/build-$curDate.log"
	if [[ -e "$logFile" ]]; then
		echo "" > "$logFile"
	fi
	mk() {
		make -j$threads "$@" >> $logFile 2>&1
	}
fi

echo "
         _      _                  _            _            _                   _      
        /\ \   /\_\               _\ \         / /\         / /\                /\ \    
       /  \ \ / / /         _    /\__ \       / /  \       / /  \              /  \ \   
      / /\ \ \\ \ \__      /\_\ / /_ \_\     / / /\ \__   / / /\ \            / /\ \ \  
     / / /\ \_\\ \___\    / / // / /\/_/    / / /\ \___\ / / /\ \ \          / / /\ \_\ 
    / / /_/ / / \__  /   / / // / /         \ \ \ \/___// / /  \ \ \        / / /_/ / / 
   / / /__\/ /  / / /   / / // / /           \ \ \     / / /___/ /\ \      / / /__\/ /  
  / / /_____/  / / /   / / // / / ____   _    \ \ \   / / /_____/ /\ \    / / /_____/   
 / / /        / / /___/ / // /_/_/ ___/\/_/\__/ / /  / /_________/\ \ \  / / /\ \ \     
/ / /        / / /____\/ //_______/\__\/\ \/___/ /  / / /_       __\ \_\/ / /  \ \ \    
\/_/         \/_________/ \_______\/     \_____\/   \_\___\     /____/_/\/_/    \_\/    
"
echo "Building version pulsar-enrc2b-$fn"

# clean code tree
echo "[*] Preparing environment"
cd /Volumes/enrc2b/kernel
mk clean && mk mrproper
mk "$defconfig"

# menuconfig
if [[ $interactive == 1 ]]; then
	echo ""
	make menuconfig
	echo ""
fi

# compile
echo "[*] Compiling Linux kernel with $threads threads"
mk HOSTCFLAGS="-I/Volumes/enrc2b/elfutils/libelf"

if [[ ! -e "arch/arm/boot/zImage" ]]; then
	echo -e "\n[*] Error, zImage not built! Cleaning up."
	mk clean && mk mrproper
	if [[ $quiet == 1 ]]; then
		echo "[*] View log at /Volumes/enrc2b/build-$curDate.log."
	fi
	exit 1
fi

# copy modules
echo "[*] Copying modules to temporary folder"
find drivers -type f -name '*.ko' -exec cp -f {} ../out/modules \;
find arch -type f -name '*.ko' -exec cp -f {} ../out/modules \;
find fs -type f -name '*.ko' -exec cp -f {} ../out/modules \;

# copy zImage
echo "[*] Making new boot.img"
cp -f arch/arm/boot/zImage ../out/tmp/zImage
cd ../out/tmp
mkbootimg --base 0 --pagesize 2048 --kernel_offset 0x10008000 --ramdisk_offset 0x11000000 --second_offset 0x10f00000 --tags_offset 0x10000100 --kernel zImage --ramdisk ramdisk.cpio.gz -o boot.img
mv boot.img ../boot.img
cd ../

# save modified defconfig if necessary
cd ../kernel
if [[ $interactive == 1 ]]; then
	echo "[*] Copying modified defconfig"
	mk savedefconfig
	cp -f ./defconfig arch/arm/configs/enrc2b_defconfig
	rm -f ./defconfig
fi

# done
echo -e "[*] Making \"pulsar-enrc2b-$fn.zip\""
cd ../out
./zipper "$fn"

# cleanup
echo "[*] Cleaning up"
cd ../kernel
mk clean && mk mrproper
cd ../
rm -f out/modules/*
rm -f out/tmp/zImage
rm -f out/boot.img

# Done
endT=$(date +%s)
diffS=$((endT-startT))
elapsedM=$((diffS/60))
elapsedS=$((diffS-(elapsedM*60)))
echo -n "[*] Done. Build took $elapsedM minutes, $elapsedS seconds. "
if [[ $quiet == 1 ]]; then
	echo -e "\n[*] View log at /Volumes/enrc2b/logs/build-$curDate.log.\n"
else
	echo -e "\n"
fi
exit
